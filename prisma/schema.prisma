// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userTag    Int      @id @default(autoincrement()) @map("userTag")
  userId     String   @unique @map("userId")
  name       String   @unique @map ("name")
  password   String   @map("password")
  createdAt  DateTime @default(now()) @map("createdAt")

  characters Characters[] // 사용자(Users) 테이블과 캐릭터(Characters) 테이블이 1:N 관계를 맺습니다.

  @@map("Users")
}

model Characters {
  charId    Int       @id @default(autoincrement()) @map("charId")
  userTag   Int       @map("userTag") // 사용자(Users) 테이블을 참조하는 외래키
  name      String    @unique @map("name")
  health    Int       @default(50) @map("health")
  power     Int       @default(10) @map("power")
  money     Int       @default(1000) @map("money")
  createdAt DateTime  @default(now()) @map("createdAt")

  user     Users     @relation(fields: [userTag], references: [userTag], onDelete: Cascade)
  inventory Inventory[]
  gears Gears[]

  @@map("Characters")
}

model Items {
  itemId   Int        @id @default(autoincrement()) @map("itemId")
  name     String     @unique @map("name")
  stat     Json       @map("stat")
  price    Int        @default(50) @map("price")
  createdAt DateTime  @default(now()) @map("createdAt")

  inventory Inventory[]
  gears Gears[]

  @@map("Items")
}

model Inventory {
  itemId   Int       @map("itemId")
  charId   Int       @map("charId")
  count    Int       @default(0) @map("count")

  items      Items         @relation(fields: [itemId], references: [itemId], onDelete: Cascade)
  characters Characters    @relation(fields: [charId], references: [charId], onDelete: Cascade)

  @@unique([itemId, charId])
  @@map("Inventory")
}

model Gears {
  itemId   Int       @map("itemId")
  charId   Int       @map("charId")
  equip    Boolean   @default(false) @map("equip")

  items      Items         @relation(fields: [itemId], references: [itemId], onDelete: Cascade)
  characters Characters    @relation(fields: [charId], references: [charId], onDelete: Cascade)

  @@unique([itemId, charId])
  @@map("Gears")
}